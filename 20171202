How to create an assembly language that we can see

JUST USE gcc

#include <stdio.h>

int main(int argc, const char * argv[]) {
    // insert code here...
    printf("Hello, World!\n");
    return 0;
}

HERE

gcc -S XXXXX.c -o XXXXX.s

And we will get something like:

	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 12
	.globl	_main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	L_.str(%rip), %rax
	movl	$0, -4(%rbp)
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	_printf
	xorl	%ecx, %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"Hello, World!\n"


.subsections_via_symbols

And this is just the assemble language.

X86-64体系结构是属于我们最常见堆CPU结构。这中体系结构隶属于CISC，也就是复杂指令集体系结构。
同时SUN的SPARK，有另外一种体系结构，叫做RISC。也就是简单指令体系结构。

不同架构的CPU的指令集是不一样的。指令集的概念，翻译过来很难直接被理解。
首先它是带着物理性质的。也就是说，我们没法直接去用软件语言描述他。实际上指令集是一种设计出来的标准，而我们只不过是去实现它。比如说
一个ADD汇编指令，其实意思就是说，我们要把寄存器的数据相加然后扔回寄存器里面。这个东西在CPU里是通过电路实现的。也就是说电路实现加法
运算。

其次就是整个程序的运行过程可以理解为这样子
java格式代码文件，编译之后变成class文件。然后文件。然后文件在不同的设备上面进行相关的运行。java跨平台运行是因为class文件可以被直接解释成不同的字节码。
当然这中间是离不开汇编这一步的。通过汇编之后我们就可以最终获得机器码了。这些机器码会被放到内存里面等待CPU去执行。这个放到内存里面是如何放进去的，我觉得
是通过电路放进去的。也就是从硬盘里读了数据然后把它通过导线变成内存的数据。然后CPU和内存也是连通的，它后面会跑去读内存的数据，以及操作数。然后就是跑电路
了。跑电路的时候就是一些逻辑门。最终把输出再放回到内存里，最后的最后，如果是需要保存的数据，就最终放回到硬盘里面。硬盘读写是最慢的。

